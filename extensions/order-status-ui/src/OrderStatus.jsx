// extensions/order-status-ui/src/OrderStatus.jsx
import { 
  reactExtension,
  Text,
  View,
  BlockStack,
  InlineLayout,
  Divider,
  useOrder,
  useApi
} from '@shopify/ui-extensions-react/customer-account';

const EUR_TO_BGN_RATE = 1.95583;

// –§—É–Ω–∫—Ü–∏–∏ –∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ
const convertBGNtoEUR = (bgnAmount) => {
  return (parseFloat(bgnAmount) / EUR_TO_BGN_RATE).toFixed(2);
};

const convertEURtoBGN = (eurAmount) => {
  return (parseFloat(eurAmount) * EUR_TO_BGN_RATE).toFixed(2);
};

export default reactExtension(
  'customer-account.order-status.block.render',
  () => <OrderStatusExtension />,
);

function OrderStatusExtension() {
  // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ hooks
  const order = useOrder();
  const api = useApi();
  
  if (!order) {
    return (
      <View padding="base" border="base" background="subdued">
        <Text>–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞</Text>
      </View>
    );
  }
  
  // –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
  const cost = api?.cost;
  const lines = api?.lines;
  const localization = api?.localization;
  const currency = localization?.currency?.current?.isoCode || 'BGN';
  const isBGN = currency === 'BGN';
  
  // –ò–∑–≤–ª–∏—á–∞–º–µ lines –æ—Ç current —Å–≤–æ–π—Å—Ç–≤–æ—Ç–æ
  let linesArray = [];
  if (lines?.current) {
    linesArray = lines.current;
  } else if (Array.isArray(lines)) {
    linesArray = lines;
  }
  
  // –ê–∫–æ –∏–º–∞ –¥–∞–Ω–Ω–∏, –ø–æ–∫–∞–∑–≤–∞–º–µ –≥–∏
  if (cost && linesArray.length > 0) {
    const totalAmount = cost.totalAmount?.current?.amount || 0;
    const shippingAmount = cost.totalShippingAmount?.current?.amount || 0;
    
    return (
      <View padding="base" border="base" background="subdued">
        <BlockStack spacing="base">
          <Text size="medium" emphasis="bold">
            üáßüá¨ –¢–≤–æ—è—Ç–∞ –ø–æ—Ä—ä—á–∫–∞ üá™üá∫
          </Text>
          
          <View padding="base" background="base" cornerRadius="base">
            <BlockStack spacing="base">
              <Text size="small" emphasis="bold">
                –ü—Ä–æ–¥—É–∫—Ç–∏:
              </Text>
              
              <BlockStack spacing="tight">
                {linesArray.map((line, index) => {
                  const title = line?.merchandise?.title || line?.title || `–ü—Ä–æ–¥—É–∫—Ç ${index + 1}`;
                  const lineAmount = line?.cost?.totalAmount?.amount || 0;
                  const quantity = line?.quantity || 1;
                  
                  const displayPrice = isBGN
                    ? `${lineAmount.toFixed(2)} –õ–í / ${convertBGNtoEUR(lineAmount)} EUR`
                    : `${lineAmount.toFixed(2)} EUR / ${convertEURtoBGN(lineAmount)} –õ–í`;

                  return (
                    <InlineLayout
                      key={`line-${index}`}
                      spacing="base"
                      blockAlignment="center"
                    >
                      <View inlineAlignment="start" minInlineSize="fill">
                        <Text size="small">
                          {quantity}√ó {title}
                        </Text>
                      </View>
                      <View inlineAlignment="end">
                        <Text size="small" emphasis="bold">
                          {displayPrice}
                        </Text>
                      </View>
                    </InlineLayout>
                  );
                })}
              </BlockStack>

              {shippingAmount > 0 && (
                <>
                  <Divider />
                  <InlineLayout spacing="base" blockAlignment="center">
                    <View inlineAlignment="start" minInlineSize="fill">
                      <Text size="small">–î–æ—Å—Ç–∞–≤–∫–∞</Text>
                    </View>
                    <View inlineAlignment="end">
                      <Text size="small" emphasis="bold">
                        {isBGN
                          ? `${shippingAmount.toFixed(2)} –õ–í / ${convertBGNtoEUR(shippingAmount)} EUR`
                          : `${shippingAmount.toFixed(2)} EUR / ${convertEURtoBGN(shippingAmount)} –õ–í`
                        }
                      </Text>
                    </View>
                  </InlineLayout>
                </>
              )}
            </BlockStack>
          </View>
          
          <View padding="tight" background="interactive" cornerRadius="base">
            <InlineLayout spacing="base" blockAlignment="center">
              <View inlineAlignment="start" minInlineSize="fill">
                <Text size="medium" emphasis="bold">–û–±—â–æ:</Text>
              </View>
              <View inlineAlignment="end">
                <Text size="large" emphasis="bold">
                  {isBGN
                    ? `${totalAmount.toFixed(2)} –õ–í / ${convertBGNtoEUR(totalAmount)} EUR`
                    : `${totalAmount.toFixed(2)} EUR / ${convertEURtoBGN(totalAmount)} –õ–í`
                  }
                </Text>
              </View>
            </InlineLayout>
          </View>
          
          <View padding="extraTight">
            <Text size="small" appearance="subdued">
              –ö—É—Ä—Å: 1 EUR = {EUR_TO_BGN_RATE} BGN (—Ñ–∏–∫—Å–∏—Ä–∞–Ω –∫—É—Ä—Å –Ω–∞ –ë–ù–ë)
            </Text>
          </View>
        </BlockStack>
      </View>
    );
  }
  
  // –ê–∫–æ –Ω—è–º–∞ –¥–∞–Ω–Ω–∏
  return (
    <View padding="base" border="base" background="subdued">
      <BlockStack spacing="base">
        <Text size="medium" emphasis="bold">
          üáßüá¨ –¢–≤–æ—è—Ç–∞ –ø–æ—Ä—ä—á–∫–∞ üá™üá∫
        </Text>
        <Text size="small">
          –ü–æ—Ä—ä—á–∫–∞: {order.name || order.id}
        </Text>
        <Text size="small" appearance="subdued">
          –ú–æ–ª—è, –ø—Ä–µ–∑–∞—Ä–µ–¥–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∞–∫–æ –Ω–µ –≤–∏–∂–¥–∞—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ
        </Text>
      </BlockStack>
    </View>
  );
}